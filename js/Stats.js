export default class t{constructor(e){this.baseStats=new Map(t.definedBaseStats),this.builder=e}get armorCore(){let e=this.baseStats.get("armor");for(const s of this.getModifiersOf("armMod"))e+=t.calculate(s);let s=1;for(const e of this.getModifiersOf("armBonus"))s+=t.calculate(e);return e*s}get armorFromHealth(){const e=this.healthCore;let s=0;for(const e of this.getModifiersOf("armorFromHealthRatio"))s+=t.calculate(e);return e*s}get netArmor(){const e=this.armorCore;let s=1;for(const e of this.getModifiersOf("armBonus"))s+=t.calculate(e);let r=1;for(const e of this.getModifiersOf("armorToHealth"))r+=t.calculate(e);return(e+this.armorFromHealth*s)*r}get healthCore(){let e=this.baseStats.get("health");for(const s of this.getModifiersOf("healthFromArmor"))e+=t.calculate(s);let s=1;for(const e of this.getModifiersOf("healthBonus"))s+=t.calculate(e);for(const e of this.getModifiersOf("healthToArmor"))s+=t.calculate(e);return e*s}get netHealth(){const e=this.healthCore;let s=1;for(const e of this.getModifiersOf("healthFrenzy"))s+=t.calculate(e);return e*s}getModifiersOf(t){return this.modifiers.filter((e=>e.part==t))}get modifiers(){const e=[],s=this.builder.dbs.get("perk_decks").get(this.builder.exp.perkDeck),r=this.builder.exp.skills,i=this.builder.exp.armor,o=this.builder.dbs.get("skills");s&&s.stats&&e.push(...s.stats.filter((e=>!t.isBlacklisted(i,e)&&t.isWhitelisted(i,e))));for(const[s,{state:a}]of r){const r=o.get(s);r.stats&&(r.stats.basic&&e.push(...r.stats.basic.filter((e=>!t.isBlacklisted(i,e)&&t.isWhitelisted(i,e)))),1!=a&&r.stats.ace&&e.push(...r.stats.ace.filter((e=>!t.isBlacklisted(i,e)&&t.isWhitelisted(i,e)))))}const a=[];for(const{overrides:t}of e)t&&a.push(...t);return e.filter((({id:t})=>!a.includes(t)))}setBaseStats(t){for(const e in t)this.baseStats.set(e,t[e])}getStats(...t){const e=[];for(const[s,r]of t){const t=s.substring(0,1),i=`net${s.replace(t,t.toUpperCase())}`;i in this?e.push([s,this[i]]):e.push([s,r])}return e}static isWhitelisted(t,{whitelist:e}){return!t||!e||e.includes(t)}static isBlacklisted(t,{blacklist:e}){return t&&e&&e.includes(t)}static calculate(t){if(!t.exec)return t.value;const e=[];for(const s of t.arguments)e.push(this[s]);return t.exec(...e)}}t.definedBaseStats=[["health",230]];
